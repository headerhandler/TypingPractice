import java.awt.Color;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;

import javax.swing.JLabel;
import javax.swing.ImageIcon;

import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.util.Random;

import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.Timer;

public class TypePlatform extends javax.swing.JFrame {

    /**
     * Creates new form TypePlatform
     */
    private static Color defaultColor;
    private JButton active;
    private boolean buttonPressed = false;
    private Timer keyChecker;
    private String[] fullText;
    private static FocusHandler focusHandler;
    private String textTest = "";
    private static KeyboardFocusManager manager;
    private static KeyHandler mainHandler;
    private String textTest2 = "";
    private char[] mainChar;
    private Random randomBack = new Random();
    private int count;
    public TypePlatform() {
        super("Type Practice");
        try {
            InputStream is = getClass().getResourceAsStream("/Resources/text.txt");
            fullText = new BufferedReader(new InputStreamReader(is)).readLine().split(" ");
        }
        catch (Exception ex){
            ex.printStackTrace();
        }
        count = randomBack.nextInt(10);
        setContentPane(new JLabel(new ImageIcon(getClass().getResource("/Resources/img" + count + ".jpg"))));
        initComponents();
        manager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
        mainHandler = new KeyHandler();
        focusHandler = new FocusHandler();
        keyChecker = new Timer(50, new TimerHandler());
        refreshMenuItem.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent ev)
            {
                refreshText();
            }
        });
        refreshText();
    }
    
    public void refreshText()
    {
        manager.addKeyEventDispatcher(mainHandler);
        jTextArea1.requestFocusInWindow();
        jTextArea1.addFocusListener(focusHandler);
        textTest = "";
        textTest2 = "";
        for (int v = 0; v < 10; v++)
        {
            double randomValue = Math.random();
            double randomValue2 = Math.random();
            if (v!= 0)
            {
                textTest += " " + fullText[(int)Math.round(randomValue*389)];
                textTest2 += " " + fullText[(int)Math.round(randomValue2*389)];
            }
            else
            {
                textTest += fullText[(int)Math.round(randomValue*389)];
                textTest2 += fullText[(int)Math.round(randomValue2*389)];
            }
        }
        textTest += "\n";
        textLabelTop.setText(textTest);
        textLabelBottom.setText(textTest2);
        mainChar = (textTest+textTest2).toCharArray();
        jTextArea1.setText("");
        keyChecker.start();
        if (!jTextArea1.isEditable())
            jTextArea1.setEditable(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        tildeKey = new javax.swing.JButton();
        oneKey = new javax.swing.JButton();
        twoKey = new javax.swing.JButton();
        threeKey = new javax.swing.JButton();
        fourKey = new javax.swing.JButton();
        fiveKey = new javax.swing.JButton();
        sixKey = new javax.swing.JButton();
        sevenKey = new javax.swing.JButton();
        eightKey = new javax.swing.JButton();
        nineKey = new javax.swing.JButton();
        zeroKey = new javax.swing.JButton();
        minusKey = new javax.swing.JButton();
        plusKey = new javax.swing.JButton();
        backspaceKey = new javax.swing.JButton();
        tabKey = new javax.swing.JButton();
        capsKey = new javax.swing.JButton();
        shiftKey = new javax.swing.JButton();
        spaceKey = new javax.swing.JButton();
        qKey = new javax.swing.JButton();
        wKey = new javax.swing.JButton();
        eKey = new javax.swing.JButton();
        rKey = new javax.swing.JButton();
        tKey = new javax.swing.JButton();
        yKey = new javax.swing.JButton();
        uKey = new javax.swing.JButton();
        iKey = new javax.swing.JButton();
        oKey = new javax.swing.JButton();
        pKey = new javax.swing.JButton();
        brace1Key = new javax.swing.JButton();
        brace2Key = new javax.swing.JButton();
        slashKey = new javax.swing.JButton();
        aKey = new javax.swing.JButton();
        sKey = new javax.swing.JButton();
        dKey = new javax.swing.JButton();
        fKey = new javax.swing.JButton();
        gKey = new javax.swing.JButton();
        scolonKey = new javax.swing.JButton();
        zKey = new javax.swing.JButton();
        hKey = new javax.swing.JButton();
        jKey = new javax.swing.JButton();
        kKey = new javax.swing.JButton();
        lKey = new javax.swing.JButton();
        quoteKey = new javax.swing.JButton();
        enterKey = new javax.swing.JButton();
        xKey = new javax.swing.JButton();
        cKey = new javax.swing.JButton();
        vKey = new javax.swing.JButton();
        bKey = new javax.swing.JButton();
        nKey = new javax.swing.JButton();
        mKey = new javax.swing.JButton();
        commaKey = new javax.swing.JButton();
        stopKey = new javax.swing.JButton();
        questionKey = new javax.swing.JButton();
        upKey = new javax.swing.JButton();
        leftKey = new javax.swing.JButton();
        downKey = new javax.swing.JButton();
        rightKey = new javax.swing.JButton();
        topLabel = new javax.swing.JLabel();
        nextLabel = new javax.swing.JLabel();
        accuracy = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel1.setForeground(Color.WHITE);
        jLabel1.setBackground(Color.BLUE);
        textLabelTop = new javax.swing.JLabel();
        textLabelBottom = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        refreshMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Courier New", 1, 12)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        tildeKey.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        tildeKey.setText("`");

        oneKey.setText("1");
        oneKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneKeyActionPerformed(evt);
            }
        });

        twoKey.setText("2");
        twoKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoKeyActionPerformed(evt);
            }
        });

        threeKey.setText("3");

        fourKey.setText("4");

        fiveKey.setText("5");

        sixKey.setText("6");
        sixKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sixKeyActionPerformed(evt);
            }
        });

        sevenKey.setText("7");

        eightKey.setText("8");

        nineKey.setText("9");

        zeroKey.setText("0");

        minusKey.setText("-");
        minusKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minusKeyActionPerformed(evt);
            }
        });

        plusKey.setText("=");

        backspaceKey.setText("Backspace");

        tabKey.setText("Tab");

        capsKey.setText("Caps");
        capsKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                capsKeyActionPerformed(evt);
            }
        });

        shiftKey.setText("Shift");

        qKey.setText("Q");

        wKey.setText("W");

        eKey.setText("E");
        eKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eKeyActionPerformed(evt);
            }
        });

        rKey.setText("R");

        tKey.setText("T");

        yKey.setText("Y");

        uKey.setText("U");

        iKey.setText("I");

        oKey.setText("O");
        oKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oKeyActionPerformed(evt);
            }
        });

        pKey.setText("P");

        brace1Key.setText("[");
        brace1Key.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brace1KeyActionPerformed(evt);
            }
        });

        brace2Key.setText("]");

        slashKey.setText("\\");

            aKey.setText("A");

            sKey.setText("S");
            sKey.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    sKeyActionPerformed(evt);
                }
            });

            dKey.setText("D");

            fKey.setText("F");

            gKey.setText("G");
            gKey.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    gKeyActionPerformed(evt);
                }
            });

            scolonKey.setText(";");

            zKey.setText("Z");

            hKey.setText("H");

            jKey.setText("J");

            kKey.setText("K");

            lKey.setText("L");

            quoteKey.setText("'");

            enterKey.setText("Enter");

            xKey.setText("X");

            cKey.setText("C");

            vKey.setText("V");
            vKey.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    vKeyActionPerformed(evt);
                }
            });

            bKey.setText("B");

            nKey.setText("N");

            mKey.setText("M");

            commaKey.setText(",");

            stopKey.setText(".");
            stopKey.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    stopKeyActionPerformed(evt);
                }
            });

            questionKey.setText("/");
            questionKey.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    questionKeyActionPerformed(evt);
                }
            });

            upKey.setText("^");

            leftKey.setText("<");

            downKey.setFont(new java.awt.Font("Tahoma", 0, 8)); // NOI18N
            downKey.setText("V");

            rightKey.setText(">");

            topLabel.setBackground(Color.WHITE);
            topLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
            topLabel.setForeground(Color.WHITE);
            topLabel.setText("Type some text using your keyboard. The keys you press will be highlighted and the text will be displayed.");

            nextLabel.setBackground(Color.WHITE);
            nextLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
            nextLabel.setForeground(Color.WHITE);
            nextLabel.setText("Note: Clicking the button with your mouse will not perform any action.");

            accuracy.setBackground(new java.awt.Color(0, 255, 0));

            javax.swing.GroupLayout accuracyLayout = new javax.swing.GroupLayout(accuracy);
            accuracy.setLayout(accuracyLayout);
            accuracyLayout.setHorizontalGroup(
                accuracyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 55, Short.MAX_VALUE)
            );
            accuracyLayout.setVerticalGroup(
                accuracyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 0, Short.MAX_VALUE)
            );

            jLabel1.setText("Accuracy Monitor:");

            textLabelTop.setBackground(Color.WHITE);
            textLabelTop.setFont(new java.awt.Font("Courier New", 1, 12)); // NOI18N
            textLabelTop.setForeground(Color.WHITE);
            textLabelTop.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            textLabelTop.setInheritsPopupMenu(false);
            textLabelTop.setVerifyInputWhenFocusTarget(false);

            textLabelBottom.setBackground(Color.WHITE);
            textLabelBottom.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
            textLabelBottom.setForeground(Color.WHITE);
            textLabelBottom.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

            fileMenu.setText("File");

            refreshMenuItem.setText("Refresh Text");
            fileMenu.add(refreshMenuItem);

            jMenuBar1.add(fileMenu);

            setJMenuBar(jMenuBar1);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(16, 16, 16)
                            .addComponent(nextLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(accuracy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 675, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(topLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGap(0, 0, Short.MAX_VALUE))
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(tabKey, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(qKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(wKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(eKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(rKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(tKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(yKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(9, 9, 9)
                            .addComponent(uKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(iKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(oKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, 0)
                            .addComponent(pKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(brace1Key, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(brace2Key, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(slashKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(shiftKey, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(zKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(xKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(5, 5, 5)
                                    .addComponent(vKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(bKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(nKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(mKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(commaKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(stopKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(questionKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(spaceKey, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(leftKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(6, 6, 6)
                                    .addComponent(downKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(rightKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(46, 46, 46)
                                    .addComponent(upKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(40, 40, 40))
                        .addComponent(textLabelTop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(capsKey, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(aKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(sKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(dKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(fKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(gKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(5, 5, 5)
                                            .addComponent(hKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(kKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(lKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(0, 0, 0)
                                            .addComponent(scolonKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(quoteKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(enterKey))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(tildeKey)
                                            .addGap(5, 5, 5)
                                            .addComponent(oneKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(twoKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(threeKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(fourKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(fiveKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(sixKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(sevenKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(eightKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(nineKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(zeroKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(minusKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(7, 7, 7)
                                            .addComponent(plusKey, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(3, 3, 3)
                                            .addComponent(backspaceKey)))
                                    .addGap(0, 0, Short.MAX_VALUE))
                                .addComponent(textLabelBottom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addContainerGap())))
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(topLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                            .addComponent(nextLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE))
                        .addComponent(accuracy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                    .addComponent(textLabelTop, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(textLabelBottom, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tildeKey)
                        .addComponent(oneKey)
                        .addComponent(twoKey)
                        .addComponent(threeKey)
                        .addComponent(fourKey)
                        .addComponent(fiveKey)
                        .addComponent(sixKey)
                        .addComponent(sevenKey)
                        .addComponent(eightKey)
                        .addComponent(nineKey)
                        .addComponent(zeroKey)
                        .addComponent(minusKey)
                        .addComponent(plusKey)
                        .addComponent(backspaceKey))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tabKey)
                        .addComponent(qKey)
                        .addComponent(wKey)
                        .addComponent(eKey)
                        .addComponent(rKey)
                        .addComponent(tKey)
                        .addComponent(yKey)
                        .addComponent(uKey)
                        .addComponent(iKey)
                        .addComponent(oKey)
                        .addComponent(pKey)
                        .addComponent(brace1Key)
                        .addComponent(brace2Key)
                        .addComponent(slashKey))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(capsKey)
                        .addComponent(aKey)
                        .addComponent(sKey)
                        .addComponent(dKey)
                        .addComponent(fKey)
                        .addComponent(gKey)
                        .addComponent(scolonKey)
                        .addComponent(hKey)
                        .addComponent(jKey)
                        .addComponent(kKey)
                        .addComponent(lKey)
                        .addComponent(quoteKey)
                        .addComponent(enterKey))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(shiftKey)
                        .addComponent(zKey)
                        .addComponent(xKey)
                        .addComponent(cKey)
                        .addComponent(vKey)
                        .addComponent(bKey)
                        .addComponent(nKey)
                        .addComponent(mKey)
                        .addComponent(commaKey)
                        .addComponent(stopKey)
                        .addComponent(questionKey)
                        .addComponent(upKey, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(spaceKey, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rightKey, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(leftKey, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(downKey, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap())
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void oneKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneKeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_oneKeyActionPerformed

    private void twoKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twoKeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_twoKeyActionPerformed

    private void minusKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minusKeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_minusKeyActionPerformed

    private void sixKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sixKeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sixKeyActionPerformed

    private void eKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eKeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eKeyActionPerformed

    private void oKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oKeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_oKeyActionPerformed

    private void brace1KeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brace1KeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_brace1KeyActionPerformed

    private void sKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sKeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sKeyActionPerformed

    private void gKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gKeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gKeyActionPerformed

    private void capsKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_capsKeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_capsKeyActionPerformed

    private void vKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vKeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_vKeyActionPerformed

    private void stopKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopKeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stopKeyActionPerformed

    private void questionKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_questionKeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_questionKeyActionPerformed

    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aKey;
    private javax.swing.JPanel accuracy;
    private javax.swing.JButton bKey;
    private javax.swing.JButton backspaceKey;
    private javax.swing.JButton brace1Key;
    private javax.swing.JButton brace2Key;
    private javax.swing.JButton cKey;
    private javax.swing.JButton capsKey;
    private javax.swing.JButton commaKey;
    private javax.swing.JButton dKey;
    private javax.swing.JButton downKey;
    private javax.swing.JButton eKey;
    private javax.swing.JButton eightKey;
    private javax.swing.JButton enterKey;
    private javax.swing.JButton fKey;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton fiveKey;
    private javax.swing.JButton fourKey;
    private javax.swing.JButton gKey;
    private javax.swing.JButton hKey;
    private javax.swing.JButton iKey;
    private javax.swing.JButton jKey;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton kKey;
    private javax.swing.JButton lKey;
    private javax.swing.JButton leftKey;
    private javax.swing.JButton mKey;
    private javax.swing.JButton minusKey;
    private javax.swing.JButton nKey;
    private javax.swing.JLabel nextLabel;
    private javax.swing.JButton nineKey;
    private javax.swing.JButton oKey;
    private javax.swing.JButton oneKey;
    private javax.swing.JButton pKey;
    private javax.swing.JButton plusKey;
    private javax.swing.JButton qKey;
    private javax.swing.JButton questionKey;
    private javax.swing.JButton quoteKey;
    private javax.swing.JButton rKey;
    private javax.swing.JMenuItem refreshMenuItem;
    private javax.swing.JButton rightKey;
    private javax.swing.JButton sKey;
    private javax.swing.JButton scolonKey;
    private javax.swing.JButton sevenKey;
    private javax.swing.JButton shiftKey;
    private javax.swing.JButton sixKey;
    private javax.swing.JButton slashKey;
    private javax.swing.JButton spaceKey;
    private javax.swing.JButton stopKey;
    private javax.swing.JButton tKey;
    private javax.swing.JButton tabKey;
    private javax.swing.JLabel textLabelBottom;
    private javax.swing.JLabel textLabelTop;
    private javax.swing.JButton threeKey;
    private javax.swing.JButton tildeKey;
    private javax.swing.JLabel topLabel;
    private javax.swing.JButton twoKey;
    private javax.swing.JButton uKey;
    private javax.swing.JButton upKey;
    private javax.swing.JButton vKey;
    private javax.swing.JButton wKey;
    private javax.swing.JButton xKey;
    private javax.swing.JButton yKey;
    private javax.swing.JButton zKey;
    private javax.swing.JButton zeroKey;
    // End of variables declaration//GEN-END:variables
    private class KeyHandler implements KeyEventDispatcher
    {
        @Override
        public boolean dispatchKeyEvent(KeyEvent ev)
        {
            if (ev.getID() == KeyEvent.KEY_PRESSED)
            {   
                if (!keyChecker.isRunning() | ((ev.getKeyCode()!= KeyEvent.VK_BACK_SPACE)
                        | (ev.getKeyCode()!= KeyEvent.VK_CAPS_LOCK) | (ev.getKeyCode() != 
                        KeyEvent.VK_SHIFT) | (ev.getKeyCode() != KeyEvent.VK_SPACE)))
                    keyChecker.start();
                if (ev.isControlDown())  // if control key is pressed
                {
                    if (ev.getKeyCode() == KeyEvent.VK_V) // and s is further pressed when ctrl is down
                        ev.consume();
                }
                if (!buttonPressed)
                {
                    defaultColor = aKey.getBackground();
                    buttonPressed = true;
                    switch(ev.getKeyCode()) 
                    {    
                    case KeyEvent.VK_A:
                        aKey.setBackground(Color.BLUE);
                        active = aKey;
                        break;
                    case KeyEvent.VK_B:
                        bKey.setBackground(Color.BLUE);
                        active = bKey;
                        break;
                    case KeyEvent.VK_C:
                        cKey.setBackground(Color.BLUE);
                        active = cKey;
                        break;
                    case KeyEvent.VK_D:
                        dKey.setBackground(Color.BLUE);
                        active = dKey;
                        break;
                    case KeyEvent.VK_E:
                        eKey.setBackground(Color.BLUE);
                        active = eKey;
                        break;
                    case KeyEvent.VK_F:
                        fKey.setBackground(Color.BLUE);
                        active = fKey;
                        break;
                    case KeyEvent.VK_G:
                        gKey.setBackground(Color.BLUE);
                        active = gKey;
                        break;
                    case KeyEvent.VK_H:
                        hKey.setBackground(Color.BLUE);
                        active = hKey;
                        break;
                    case KeyEvent.VK_I:
                        iKey.setBackground(Color.BLUE);
                        active = iKey;
                        break;
                    case KeyEvent.VK_J:
                        jKey.setBackground(Color.BLUE);
                        active = jKey;
                        break;
                    case KeyEvent.VK_K:
                        kKey.setBackground(Color.BLUE);
                        active = kKey;
                        break;
                    case KeyEvent.VK_L:
                        lKey.setBackground(Color.BLUE);
                        active = lKey;
                        break;
                    case KeyEvent.VK_M:
                        mKey.setBackground(Color.BLUE);
                        active = mKey;
                        break;
                    case KeyEvent.VK_N:
                        nKey.setBackground(Color.BLUE);
                        active = nKey;
                        break;
                    case KeyEvent.VK_O:
                        oKey.setBackground(Color.BLUE);
                        active = oKey;
                        break;
                    case KeyEvent.VK_P:
                        pKey.setBackground(Color.BLUE);
                        active = pKey;
                        break;
                    case KeyEvent.VK_Q:
                        qKey.setBackground(Color.BLUE);
                        active = qKey;
                        break;
                    case KeyEvent.VK_R:
                        rKey.setBackground(Color.BLUE);
                        active = rKey;
                        break;
                    case KeyEvent.VK_S:
                        sKey.setBackground(Color.BLUE);
                        active = sKey;
                        break;
                    case KeyEvent.VK_T:
                        tKey.setBackground(Color.BLUE);
                        active = tKey;
                        break;
                    case KeyEvent.VK_U:
                        uKey.setBackground(Color.BLUE);
                        active = uKey;
                        break;
                    case KeyEvent.VK_V:
                        vKey.setBackground(Color.BLUE);
                        active = vKey;
                        break;
                    case KeyEvent.VK_W:
                        wKey.setBackground(Color.BLUE);
                        active = wKey;
                        break;
                    case KeyEvent.VK_X:
                        xKey.setBackground(Color.BLUE);
                        active = xKey;
                        break;
                    case KeyEvent.VK_Y:
                        yKey.setBackground(Color.BLUE);
                        active = yKey;
                        break;
                    case KeyEvent.VK_Z:
                        zKey.setBackground(Color.BLUE);
                        active = zKey;
                        break;
                    case KeyEvent.VK_0:
                        if (ev.isShiftDown())
                            zeroKey.setText(")");
                        zeroKey.setBackground(Color.BLUE);
                        active = zeroKey;
                        break;
                    case KeyEvent.VK_1:
                        if (ev.isShiftDown())
                            oneKey.setText("!");
                        oneKey.setBackground(Color.BLUE);
                        active = oneKey;
                        break;
                    case KeyEvent.VK_2:
                        if (ev.isShiftDown())
                            twoKey.setText("@");
                        twoKey.setBackground(Color.BLUE);
                        active = twoKey;
                        break;
                    case KeyEvent.VK_3:
                        if (ev.isShiftDown())
                            threeKey.setText("#");
                        threeKey.setBackground(Color.BLUE);
                        active = threeKey;
                        break;
                    case KeyEvent.VK_4:
                        if (ev.isShiftDown())
                            fourKey.setText("$");
                        fourKey.setBackground(Color.BLUE);
                        active = fourKey;
                        break;
                    case KeyEvent.VK_5:
                        if (ev.isShiftDown())
                            fiveKey.setText("%");
                        fiveKey.setBackground(Color.BLUE);
                        active = fiveKey;
                        break;
                    case KeyEvent.VK_6:
                        if (ev.isShiftDown())
                            sixKey.setText("^");
                        sixKey.setBackground(Color.BLUE);
                        active = sixKey;
                        break;
                    case KeyEvent.VK_7:
                        if (ev.isShiftDown())
                            sevenKey.setText("&");
                        sevenKey.setBackground(Color.BLUE);
                        active = sevenKey;
                        break;
                    case KeyEvent.VK_8:
                        if (ev.isShiftDown())
                            eightKey.setText("*");
                        eightKey.setBackground(Color.BLUE);
                        active = eightKey;
                        break;
                    case KeyEvent.VK_9:
                        if (ev.isShiftDown())
                            nineKey.setText("(");
                        nineKey.setBackground(Color.BLUE);
                        active = nineKey;
                        break;
                    case KeyEvent.VK_DOWN:
                        downKey.setBackground(Color.BLUE);
                        active = downKey;
                        break;
                    case KeyEvent.VK_UP:
                        upKey.setBackground(Color.BLUE);
                        active = upKey;
                        break;
                    case KeyEvent.VK_LEFT:
                        leftKey.setBackground(Color.BLUE);
                        active = leftKey;
                        break;
                    case KeyEvent.VK_RIGHT:
                        rightKey.setBackground(Color.BLUE);
                        active = rightKey;
                        break;
                    case KeyEvent.VK_COMMA:
                        if (ev.isShiftDown())
                            commaKey.setText("<");
                        commaKey.setBackground(Color.BLUE);
                        active = commaKey;
                        break;
                    case KeyEvent.VK_CAPS_LOCK:
                        capsKey.setBackground(Color.BLUE);
                        active = capsKey;
                        break;
                    case KeyEvent.VK_MINUS:
                        if (ev.isShiftDown())
                            minusKey.setText("_");
                        minusKey.setBackground(Color.BLUE);
                        active = minusKey;
                        break;
                    case KeyEvent.VK_OPEN_BRACKET:
                        if (ev.isShiftDown())
                            brace1Key.setText("{");
                        brace1Key.setBackground(Color.BLUE);
                        active = brace1Key;
                        break;
                    case KeyEvent.VK_CLOSE_BRACKET:
                        if (ev.isShiftDown())
                            brace2Key.setText("}");
                        brace2Key.setBackground(Color.BLUE);
                        active = brace2Key;
                        break;
                    case KeyEvent.VK_BACK_SLASH:
                        if (ev.isShiftDown())
                            slashKey.setText("|");
                        slashKey.setBackground(Color.BLUE);
                        active = slashKey;
                        break;
                    case KeyEvent.VK_BACK_SPACE:
                        backspaceKey.setBackground(Color.BLUE);
                        active = backspaceKey;
                        break;
                    case KeyEvent.VK_PERIOD:
                        if (ev.isShiftDown())
                            stopKey.setText(">");
                        stopKey.setBackground(Color.BLUE);
                        active = stopKey;
                        break;
                    case KeyEvent.VK_EQUALS:
                        if (ev.isShiftDown())
                            plusKey.setText("+");
                        plusKey.setBackground(Color.BLUE);
                        active = plusKey;
                        break;
                    case KeyEvent.VK_SEMICOLON:
                        if (ev.isShiftDown())
                            scolonKey.setText(":");
                        scolonKey.setBackground(Color.BLUE);
                        active = scolonKey;
                        break;
                    case KeyEvent.VK_SHIFT:
                        shiftKey.setBackground(Color.BLUE);
                        active = shiftKey;
                        break;
                    case KeyEvent.VK_SPACE:
                        spaceKey.setBackground(Color.BLUE);
                        active = spaceKey;
                        break;
                    case KeyEvent.VK_TAB:
                        tabKey.setBackground(Color.BLUE);
                        active = tabKey;
                        break;
                    case KeyEvent.VK_QUOTE:
                        if (ev.isShiftDown())
                            quoteKey.setText("\"");
                        quoteKey.setBackground(Color.BLUE);
                        active = quoteKey;
                        break;
                    case KeyEvent.VK_BACK_QUOTE:
                        if (ev.isShiftDown())
                            tildeKey.setText("~");
                        tildeKey.setBackground(Color.BLUE);
                        active = tildeKey;
                        break;
                    case KeyEvent.VK_ENTER:
                        enterKey.setBackground(Color.BLUE);
                        active = enterKey;
                        break;
                    case KeyEvent.VK_SLASH:
                        if (ev.isShiftDown())
                            questionKey.setText("?");
                        questionKey.setBackground(Color.BLUE);
                        active = questionKey;
                        break;
                    default:
                        break;
                }   
            }
            }
            else if (ev.getID() == KeyEvent.KEY_RELEASED)
            {
                buttonPressed = false;
                if (active != null)
                    active.setBackground(defaultColor);
                if (active == oneKey)
                    active.setText("1");
                if (active == twoKey)
                    active.setText("2");
                if (active == threeKey)
                    active.setText("/");
                if (active == fourKey)
                    active.setText("4");
                if (active == fiveKey)
                    active.setText("5");
                if (active == sixKey)
                    active.setText("6");
                if (active == sevenKey)
                    active.setText("7");
                if (active == eightKey)
                    active.setText("8");
                if (active == nineKey)
                    active.setText("9");
                if (active == zeroKey)
                    active.setText("0");
                if (active == questionKey)
                    active.setText("/");
                if (active == tildeKey)
                    active.setText("~");
                if (active == plusKey)
                    active.setText("=");
                if (active == minusKey)
                    active.setText("-");
                if (active == brace1Key)
                    active.setText("[");
                if (active == brace2Key)
                    active.setText("]");
                if (active == slashKey)
                    active.setText("\\");
                if (active == scolonKey)
                    active.setText(";");
                if (active == quoteKey)
                    active.setText("'");
                if (active == commaKey)
                    active.setText(",");
                if (active == stopKey)
                    active.setText(".");
            }
            return false;
        }
    }
    private class FocusHandler extends FocusAdapter
    {
        @Override
        public void focusLost(FocusEvent e)
        {
            jTextArea1.requestFocusInWindow();
        }
    }
    private class TimerHandler implements ActionListener
    {
        @Override
        public void actionPerformed(ActionEvent e)
        {
            char[] textChar = jTextArea1.getText().toCharArray();
            if (jTextArea1.getText().equals(""))
            {
                accuracy.setBackground(Color.GREEN);
            }
            for (int v = 0; v < textChar.length; v++)
            {
                if (v == mainChar.length-1)
                {
                    keyChecker.stop();
                    manager.removeKeyEventDispatcher(mainHandler);
                    active.setBackground(defaultColor);
                    jTextArea1.removeFocusListener(focusHandler);
                    JOptionPane.showMessageDialog(null, "Very Good. File->Refresh Text to try again");
                    jTextArea1.setEditable(false);
                    break;
                }
                if (textChar[v] != mainChar[v])
                {
                	accuracy.setBackground(Color.RED);
                    keyChecker.stop();
                    break;
                }
                else
                	accuracy.setBackground(Color.GREEN);
            }
        }
    }
}